export type AccountStatement = {
  '@type': 'AccountStatement'
  statementDate?: string
  dueDate?: string
}
export type AccountPayment = {
  '@type': 'AccountPayment'
  paymentDate?: string
  amount: MonetaryAmountR
}
export type ServiceAccountStatement = AccountStatement & {
  balanceAdjustments?: MonetaryAmountR
  totalBill?: MonetaryAmountR
  serviceAddress?: PostalAddress
  billingAddress?: PostalAddress
}
export type BankAccountTransaction = {
  '@type': 'BankAccountTransaction'
  transactionType: 'credit' | 'debit'
  value: MonetaryAmountR
  memo?: string
}
export type BankAccountTransactionGroup = {
  '@type': 'BankAccountTransactionGroup'
  identifier?: number
  startDate?: string
  endDate?: string
  cashflowCategory?: string
  cashflowSubcategory?: string
  payrollAgency?: boolean
  memo?: string
  length?: number // Length in days
  payee?: string
  payer?: string
  rank?: string
  frequency?: string // 'daily', 'weekly', 'biweekly', 'monthly', 'semiMonthly', 'annually', 'irregular', ...
  periodicity?: number
  valueStddev?: MonetaryAmountR
  valueTotal?: MonetaryAmountR
  valueMean?: MonetaryAmountR
  valueMedian?: MonetaryAmountR
  transactions?: MaybeArray<BankAccountTransaction>
}
export type OrganizationAccount = Organization & {
  '@type': 'Organization'
  name?: string
  identifier?: string | number
  serviceTypes?: Array<string>
  nationality?: GovernmentOrg
  sameAs?: string // Website
}
export type Account = {
  '@type': 'Account'
  identifier?: string | number
  organization: OrganizationAccount
  startDate?: string
  endDate?: string
  accountType?: string
  accountTypeConfidence?: number
  accountStatements?: Array<AccountStatement>
  accountPayments?: Array<AccountPayment>
  value?: MonetaryAmountR
  bankAccountCategory?: string
  hasIncome?: MaybeArray<BankAccountTransactionGroup>
  hasExpense?: MaybeArray<BankAccountTransactionGroup>
  hasTransactions?: MaybeArray<BankAccountTransaction>
}
export type VCSAccountPerson = Subject<Person> & {
  '@type': 'Person'
  hasAccount: MaybeArray<Account>
}
export type VCSAccountOrganization = Subject<Organization> & {
  '@type': 'Organization'
  hasAccount: MaybeArray<Account>
}
export type VCAccountPerson = VCV1<VCSAccountPerson>
export type VCAccountOrganization = VCV1<VCSAccountOrganization>
export type VCSAddressPerson = Subject<Person> & {
  '@type': 'Person'
  address: MaybeArray<PostalAddress>
}
export type VCSAddressOrganization = Subject<Organization> & {
  '@type': 'Organization'
  address: MaybeArray<PostalAddress>
}
export type VCAddressPerson = VCV1<VCSAddressPerson>
export type VCAddressOrganization = VCV1<VCSAddressOrganization>
export type BaseAttList = {
  name?: string
  url?: string
}
export type BaseAttHit = {
  id?: string
  name?: string
}
export type AMLSearch = {
  '@type': 'AMLSearch'
  hitLocation?: string | GovernmentOrg
  hitNumber?: number
  lists?: Array<BaseAttList>
  recordId?: MaybeArray<string>
  identifier?: string
  score?: string | number
  hits?: Array<BaseAttHit>
  flagType?: string
  comment?: string
}
export type VCSAMLPerson = Subject<Person> & {
  '@type': 'Person'
  hasAMLSearch: AMLSearch
}
export type VCSAMLOrganization = Subject<Organization> & {
  '@type': 'Organization'
  hasAMLSearch: AMLSearch
}
export type VCAMLPerson = VCV1<VCSAMLPerson>
export type VCAMLOrganization = VCV1<VCSAMLOrganization>
  AdministrativeArea,
  City,
  Corporation,
  Country,
  DefinedTerm,
  GovernmentOrganization,
  MonetaryAmount,
  Organization,
  PostalAddress,
  State,
  WebSite,
  PropertyValue,
} from 'schema-dts'
export type Modify<T, R> = Pick<T, Exclude<keyof T, keyof R>> & R
export type Extend<T, R> = Modify<Exclude<T, string>, R>
export type Subject<T extends SimpleThing | string> = VCV1Subject<Exclude<T, string>>
export type MaybeArray<T> = T | Array<T>
export type GovernmentOrg =
  | Country
  | State
  | City
  | Organization
  | Corporation
  | GovernmentOrganization
  | (AdministrativeArea & {
      identifier?: 'string' // Issuer code
    })
export type MonetaryAmountR = MonetaryAmount & {
  currency: string
  value: number | string
}
export type EmployeeRoleOrganization = {
  '@type': 'EmployeeRole'
  employeeOf: OrganizationE
}
export type OrganizationE = Subject<Organization> & {
  '@type': 'Organization'
  name?: string
  address?: MaybeArray<PostalAddress>
  legalName?: string
  dissolutionDate?: string
  hasCredential?: MaybeArray<CredentialU>
  telephone?: string
  faxNumber?: string
  email?: string
  website?: MaybeArray<WebSite>
}
export type CredentialU = OrganizationalCredential | Credential
export type Credential = {
  '@type': 'Credential' | string
  credentialCategory?: string
  additionalType?: string
  dateCreated?: string
  dateModified?: string
  dateRevoked?: string
  datePublished?: string
  recognizedBy?: MaybeArray<GovernmentOrg>
}
export interface OrganizationalCredential extends Credential {
  credentialCategory: string // 'incorporation', 'foreign-registration'
  organizationType?: string | DefinedTerm
  goodStanding?: boolean // Company is in "good standing" with the recognizing authority
  active?: boolean // Company has "active" status within recognizing authority's jurisdiction
  identifier?: PropertyValue | string | number // e.g., taxId, can be a URI for specific schemes such as organizational tax IDs, or equivalent PropertyValue
  primaryJurisdiction?: boolean
}
export type TradelinePayStatus = {
  date: string
  status: string
}
export type TradelineRemark = {
  remark: string
  remarkCode: string
}
export type Tradeline = {
  '@type': 'Tradeline'
  accountType?: string
  accountNumber?: string | number
  creditType?: string
  balanceCurrent?: MonetaryAmountR
  balanceMax?: MonetaryAmountR
  balancePercentage?: number
  rating?: string
  open?: boolean
  statement?: string
  subscriberCode?: string
  verifiedDate?: string
  reportedDate?: string
  openedDate?: string
  accountStatusDate?: string
  closedDate?: string
  bureau?: string
  accountCondition?: string
  accountDesignator?: string
  disputeFlag?: string
  industryCode?: string
  accountIsOpen?: boolean
  payStatus?: string
  verificationIndicator?: string
  remark?: MaybeArray<TradelineRemark>
  monthsReviewed?: string
  monthlyPayment?: string
  late90Count?: string
  late60Count?: string
  late30Count?: string
  dateLatePayment?: string
  termMonths?: string
  collateral?: string
  amountPastDue?: MonetaryAmountR
  worstPastStatusCount?: string
  paymentFrequency?: string
  termType?: string
  worstPayStatus?: string
  payStatuses?: Array<TradelinePayStatus>
  creditLimit?: string
  creditor?: string | Organization
  position?: string
}
export type CreditScore = {
  '@type': 'CreditScore'
  score?: number
  scoreType?: string
  populationRank?: number
  provider?: string
  lastUpdatedDate?: string
  utilizationPercentage?: number
  historyStartDate?: string
  paymentHistoryPercentage?: number
  statement?: string
  tradelines?: Array<Tradeline>
  // Snapshot data
  creditDataSuppressed?: string
  totalAccounts?: string
  totalClosedAccounts?: string
  delinquentAccounts?: string
  derogatoryAccounts?: string
  openAccounts?: string
  totalBalances?: string
  totalMonthlyPayments?: string
  numberOfInquiries?: string
  totalPublicRecords?: string
  recentInquiries?: string
  balanceOpenRevolvingAccounts?: string
  totalOpenRevolvingAccounts?: string
  balanceOpenInstallmentAccounts?: string
  totalOpenInstallmentAccounts?: string
  balanceOpenMortgageAccounts?: string
  totalOpenMortgageAccounts?: string
  balanceOpenCollectionAccounts?: string
  totalOpenCollectionAccounts?: string
  balanceOpenOtherAccounts?: string
  totalOpenOtherAccounts?: string
  availableCredit?: string
  utilization?: string
  onTimePaymentPercentage?: string
  latePaymentPercentage?: string
  recentTradelinesOpened?: string
  dateOfOldestTrade?: string
  ageOfCredit?: string
  paymentHistory?: string
  securityFreeze?: string
  fraudAlert?: string
}
export type VCSCreditScorePerson = Subject<Person> & {
  '@type': 'Person'
  birthDate?: string
  name?: string
  employeeOf?: EmployeeRoleOrganization
  hasCreditScore: MaybeArray<CreditScore>
}
export type VCCreditScorePerson = VCV1<VCSCreditScorePerson>
export type VCSDOBPerson = Subject<Person> & {
  '@type': 'Person'
  birthDate: string
}
export type VCDOBPerson = VCV1<VCSDOBPerson>
export type VCSEmailPerson = Subject<Person> & {
  '@type': 'Person'
  email: MaybeArray<string>
}
export type VCSEmailOrganization = Subject<Organization> & {
  '@type': 'Organization'
  email: MaybeArray<string>
}
export type VCEmailPerson = VCV1<VCSEmailPerson>
export type VCEmailOrganization = VCV1<VCSEmailOrganization>
export type EmployeeRolePerson = Role & {
  '@type': 'EmployeeRole'
  employee: Person
}
export type VCSEmploymentPerson = Subject<Person> & {
  '@type': 'Person'
  employeeOf: MaybeArray<EmployeeRoleOrganization>
}
export type VCSEmploymentOrganization = OrganizationE & {
  '@type': 'Organization'
  employee: MaybeArray<EmployeeRolePerson>
}
export type VCEmploymentPerson = VCV1<VCSEmploymentPerson>
export type VCEmploymentOrganization = VCV1<VCSEmploymentOrganization>
export type VCSGenderPerson = Subject<Person> & {
  '@type': 'Person'
  gender: MaybeArray<GenderType | string>
}
export type VCGenderPerson = VCV1<VCSGenderPerson>
export type TDocumentClass =
  | 'unknown'
  | 'passport'
  | 'visa'
  | 'drivers_license'
  | 'identification_card'
  | 'permit'
  | 'currency'
  | 'residence_document'
  | 'travel_document'
  | 'birth_certificate'
  | 'vehicle_registration'
  | 'other'
  | 'weapon_license'
  | 'tribal_identification'
  | 'voter_identification'
  | 'military'
export type IDDocument = CreativeWork & {
  '@type': 'IDDocument'
  issuer: GovernmentOrg
  documentType?: string
  issueDate?: TDate
  issueType?: string
  expirationDate?: TDate
  classificationMethod?: 'automatic' | 'manual'
  idClass: TDocumentClass
  idClassName?: string
  countryCode?: string
  frontImage?: string
  backImage?: string
  generic?: boolean
  keesingCode?: string
}
export type IDDocumentRole = Role & {
  '@type': 'IDDocumentRole'
  authenticationResult?: string
  selfieImage?: string
  faceMatch?: MaybeArray<FaceMatch>
  hasIDDocument: MaybeArray<IDDocument>
}
export type FaceMatch = {
  '@type': 'IDDocumentFaceMatch'
  isMatch?: boolean
  score?: number
  identifier?: number
}
export type VCSIDDocPerson = Subject<Person> & {
  '@type': 'Person'
  age?: number
  birthDate?: TDate
  familyName?: string
  givenName?: string
  gender?: MaybeArray<GenderType | string>
  name?: MaybeArray<string>
  nationality?: MaybeArray<Country>
  hasIDDocument: MaybeArray<IDDocumentRole>
}
export type VCIDDocPerson = VCV1<VCSIDDocPerson>
export type ReceivedCredentialRole = {
  '@type': 'ReceivedCredentialRole'
  startDate?: string
  endDate?: string
  aggregatorDID?: string
  typesSome?: Array<string>
  typesAll?: Array<string>
  typesNot?: Array<string>
  contextsSome?: Array<string>
  contextsAll?: Array<string>
  contextsNot?: Array<string>
  issuerDIDIn?: Array<string>
  issuerDIDNotIn?: Array<string>
  receivedCredentials: MaybeArray<string | VCV1>
}
export type VCSMetaPerson = Subject<Person> & {
  '@type': 'Person'
  receivedCredentials: MaybeArray<ReceivedCredentialRole>
}
export type VCSMetaOrganization = Subject<Organization> & {
  '@type': 'Organization'
  receivedCredentials: MaybeArray<ReceivedCredentialRole>
}
export type VCMetaPerson = VCV1<VCSMetaPerson>
export type VCMetaOrganization = VCV1<VCSMetaOrganization>
export type VCSNamePerson = Subject<Person> & {
  '@type': 'Person'
  name: MaybeArray<string>
}
export type VCSNameOrganization = Subject<Organization> & {
  '@type': 'Organization'
  name: MaybeArray<string>
}
export type VCNamePerson = VCV1<VCSNamePerson>
export type VCNameOrganization = VCV1<VCSNameOrganization>
export type NatPropertyValue = PropertyValue & {
  '@type': 'PropertyValue'
  propertyID: string
  value: string | number
}
export type NationalityRole = Role & {
  '@type': 'NationalityRole'
  nationality: GovernmentOrg
  identifier: NatPropertyValue
}
export type VCSNatIDNumPerson = Subject<Person> & {
  '@type': 'Person'
  nationality: NationalityRole
}
export type VCSNatIDNumOrganization = Subject<Organization> & {
  '@type': 'Organization'
  nationality: NationalityRole
}
export type VCNatIDNumPerson = VCV1<VCSNatIDNumPerson>
export type VCNatIDNumOrganization = VCV1<VCSNatIDNumOrganization>
export type VCSPhonePerson = Subject<Person> & {
  '@type': 'Person'
  telephone: MaybeArray<string>
}
export type VCSPhoneOrganization = Subject<Organization> & {
  '@type': 'Organization'
  telephone: MaybeArray<string>
}
export type VCPhonePerson = VCV1<VCSPhonePerson>
export type VCPhoneOrganization = VCV1<VCSPhoneOrganization>
